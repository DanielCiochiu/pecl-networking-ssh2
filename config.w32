// $Id$
// vim:ft=javascript

ARG_WITH("ssh2", "SSH2 support", "no");

if (PHP_SSH2 != "no") {
	if ((((PHP_ZLIB=="no") && (CHECK_LIB("zlib_a.lib", "ssh2", PHP_SSH2) ||  CHECK_LIB("zlib.lib", "ssh2", PHP_SSH2))) || 
		(PHP_ZLIB_SHARED && CHECK_LIB("zlib.lib", "ssh2", PHP_SSH2)) || (PHP_ZLIB == "yes" && (!PHP_ZLIB_SHARED))) &&
		CHECK_LIB("libeay32.lib", "ssh2", PHP_SSH2) &&
		CHECK_LIB("ssleay32.lib", "ssh2", PHP_SSH2) &&
		CHECK_LIB("ws2_32.lib", "ssh2", PHP_SSH2)) {

		FSO.CopyFile(configure_module_dirname + "\\libssh2\\include\\libssh2_config.h.in.w32",
	  		 	configure_module_dirname + "\\libssh2\\include\\libssh2_config.h");

		AC_DEFINE('HAVE_SSH2LIB', 1);
		AC_DEFINE('PHP_SSH2_REMOTE_FORWARDING', 1);
		AC_DEFINE('PHP_SSH2_HOSTBASED_AUTH', 1);
		AC_DEFINE('PHP_SSH2_POLL', 1);
		AC_DEFINE('PHP_SSH2_PUBLICKEY_SUBSYSTEM', 1);

		ADD_FLAG('CFLAGS_SSH2', '/DLIBSSH2_WIN32=1 /DLIBSSH2_API= /I ' + 
				configure_module_dirname + '/libssh2/include');

		EXTENSION("ssh2", "ssh2.c ssh2_fopen_wrappers.c ssh2_sftp.c");

		ADD_SOURCES(configure_module_dirname + "/libssh2/src", "channel.c  crypt.c \
				kex.c misc.c publickey.c scp.c sftp.c comp.c hostkey.c mac.c packet.c \
				session.c userauth.c", "ssh2");
	} else {
		WARNING("ssh2 not enabled: libraries or headers not found");
	}
}
